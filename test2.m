function [] = test2()
% Projekt 2, zadanie 30
% Mateusz Stawicki, 333274
%
% Funkcja testująca implementację głównego programu opartego na metodzie
% Adamsa-Bashfortha rzędu 3-go dla równań różniczkowych pierwszego i
% drugiego rzędu z wartościami początkowymi Y1, Y2 wyznaczonnymi metodą
% Rungego-Kutty rzędu 3-go.

% Wypisanie informacji o teście
fprintf("-----------------------------------Test2-----------------" + ...
    "------------------\n");
fprintf("Funkcja testuje poprawność implementacji głównego programu," + ...
    " który wyznacza\n" + ...
    "rozwiązanie równania różniczkowego pierwszego lub drugiego rzę" + ...
    "du za pomocą\n" + ...
    "metody Adamsa-Bashfortha rzędu 3-go z wykorzystaniem metody Ru" + ...
    "ngego-Kutty\n" + ...
    "rzędu 3-go do wyznaczenia wartości początkowych Y1 oraz Y2. Pr" + ...
    "zeprowadzony\n" + ...
    "test polega na wyznaczeniu za pomocą głównego programu rozwi" + ...
    "ązania\n" + ...
    "równania różniczkowego (tzn. w każdym punkcie x_j =  x0 + h * " + ...
    "j, gdzie\n" + ...
    "h = (xN - x0) / N, a j = 0,1,...,N). Do testowania wykorzysta" + ...
    "no kilka\n" + ...
    "równań różniczkowych rzędu 1-go oraz 2-go. Wartości dokładne p" + ...
    "ochodzą z\n" + ...
    "wyznaczenia wzorów funkcji analitycznie oraz obliczania w odpo" + ...
    "wiednich\n" + ...
    "punktach ich wartości. Test bazuje na badaniu błędu globalneg" + ...
    "o oraz\n" + ...
    "porównania stosunku err2 / err1 (błędów globalnych dla różnyc" + ...
    "h kroków\n" + ...
    "całkowania) do wartości (h2 / h1)^3 (wspomnianych kroków). Zaim" + ...
    "plementowana\n" + ...
    "metoda powinna być rzędu 3, więc wspomniane stosunki muszą" + ...
    " być\n" + ...
    "zbliżone.\n");

% Odpowiednie wyświetlanie
fprintf("[Press any key] "); pause(); fprintf("\n");

% Parametry wykorzystane w testach (można je w kodzie zmieniać dzięki czemu
% łatwo rozszerzyć testy, obserwować co się dzieje na innych przedziałach,
% innej liczbie kroków itd.)
x0 = 0; xN = 1; % Przedział całkowania
Y0p = {1, [1,1], [1,1], 1}; % Tablica komórkowa warunków początkowych
V= zeros(5,2); % Inicjalizacja wektora pomocniczego przechowującego N oraz
% błąd globalny (potrzebne do wypisania wyników testów)
% Tablice komórkowe zawierające w komórkach parametry a,b oraz N
% opisane dokładnie w specyfikacji funkcji AB3
A = {{@(x) 0, @(x) 5}; {@(x) 1, @(x) -2, @(x) 1}; ...
    {@(x) 6, @(x) -5, @(x) 1}; {@(x) 0, @(x) 1}};
B = {@(x) exp(x), @(x) x^3,@(x) 0, @(x) x^2};
N1 = {[10, 100,200,400,1000];[10, 100,200,400,10000]; ...
    [10, 100,200,400,10000]; [10,100,200,400,10000]};
n = length(N1{1});
% Dokładne funkcje wyznaczone analitycznie będące rozwiązaniem równania
EXAC = {@(x) 1/5 .* exp(x) + 4/5, @(x) (-23 .* exp(x)) + ...
    (6 .* x .* exp(x)) + (x.^3) + (6 .* x.^2) + (18 .* x) + ...
    24, @(x)2 .* exp(2 .* x) - 1 .*exp(x .* 3), @(x) 1/3 .* x.^3 + 1};
% Sposób wyświetlania równania
name = {"5 * y' = e^x","y'' - 2 * y' + y = x^3", "y'' - 5 *" + ...
    " y' + 6 * y = 0", "y' = x^2"};
k = length(A);
for j = 1:k % Testowanie kolejnych równań
    a = A{j};
    b = B{j};
    N = N1{j};
    Y0 = Y0p{j};
    exa = EXAC{j};
    for i = 1:n % Testowanie różnych wartości kroków dla danego równania
        V(i,1) = N(i);
        y_numerical = P2Z30_MST_ABRK3(b, a, x0, xN, Y0, N(i));
        x_values = linspace(x0, xN, N(i) + 1);
        y_exact = exa(x_values);
        err = GlobalError(y_numerical, y_exact);
        V(i,2) = err;
    end
    if j == 3 % Zadbanie o poprawne wyświetlanie
        fprintf("[Press any key] "); pause(); fprintf("\n");
    end

    % Wypisanie informacji o tym jakie równanie jest rozpatrywane
    fprintf("-----------------------------------------------" + ...
        "----------------------------\n");
    fprintf("Równanie różniczkowe: %s\n",name{j});
    fprintf("-----------------------------------------------" + ...
        "----------------------------\n");

    % Wypisanie tabeli
    fprintf("|        h       |  błąd globalny |stosunek " + ...
        "błędów |stosunek (h2/h1)^3|\n")
    for i = 1:n
        if i == 1
            fprintf("|    %5.3e   |    %5.3e   |       -        |  " + ...
                "       -        |\n",  (xN - x0) / V(1,1), V(1,2));
        else
            fprintf("|    %5.3e   |    %5.3e   |    %5.3e   |    " + ...
                " %5.3e    |\n",  (xN - x0) / V(i,1), V(i,2), V(i,2) / ...
                V(i-1,2), (V(i - 1,1) / V(i))^3);
        end
    end
    fprintf("---------------------------------------------------" + ...
        "------------------------\n");
end
fprintf("[Press any key] "); pause(); fprintf("\n");

end % function


